// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: hospital.proto

package inventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HospitalServerClient is the client API for HospitalServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HospitalServerClient interface {
	PostHospital(ctx context.Context, in *Hospital, opts ...grpc.CallOption) (*Response, error)
	PostHospitals(ctx context.Context, in *Hospitals, opts ...grpc.CallOption) (*Response, error)
}

type hospitalServerClient struct {
	cc grpc.ClientConnInterface
}

func NewHospitalServerClient(cc grpc.ClientConnInterface) HospitalServerClient {
	return &hospitalServerClient{cc}
}

func (c *hospitalServerClient) PostHospital(ctx context.Context, in *Hospital, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/HospitalServer/PostHospital", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalServerClient) PostHospitals(ctx context.Context, in *Hospitals, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/HospitalServer/PostHospitals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HospitalServerServer is the server API for HospitalServer service.
// All implementations must embed UnimplementedHospitalServerServer
// for forward compatibility
type HospitalServerServer interface {
	PostHospital(context.Context, *Hospital) (*Response, error)
	PostHospitals(context.Context, *Hospitals) (*Response, error)
	mustEmbedUnimplementedHospitalServerServer()
}

// UnimplementedHospitalServerServer must be embedded to have forward compatible implementations.
type UnimplementedHospitalServerServer struct {
}

func (UnimplementedHospitalServerServer) PostHospital(context.Context, *Hospital) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostHospital not implemented")
}
func (UnimplementedHospitalServerServer) PostHospitals(context.Context, *Hospitals) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostHospitals not implemented")
}
func (UnimplementedHospitalServerServer) mustEmbedUnimplementedHospitalServerServer() {}

// UnsafeHospitalServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HospitalServerServer will
// result in compilation errors.
type UnsafeHospitalServerServer interface {
	mustEmbedUnimplementedHospitalServerServer()
}

func RegisterHospitalServerServer(s grpc.ServiceRegistrar, srv HospitalServerServer) {
	s.RegisterService(&HospitalServer_ServiceDesc, srv)
}

func _HospitalServer_PostHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hospital)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServerServer).PostHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HospitalServer/PostHospital",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServerServer).PostHospital(ctx, req.(*Hospital))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalServer_PostHospitals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hospitals)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServerServer).PostHospitals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HospitalServer/PostHospitals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServerServer).PostHospitals(ctx, req.(*Hospitals))
	}
	return interceptor(ctx, in, info, handler)
}

// HospitalServer_ServiceDesc is the grpc.ServiceDesc for HospitalServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HospitalServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HospitalServer",
	HandlerType: (*HospitalServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostHospital",
			Handler:    _HospitalServer_PostHospital_Handler,
		},
		{
			MethodName: "PostHospitals",
			Handler:    _HospitalServer_PostHospitals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hospital.proto",
}
